## Trigger para ejecutar
## push a la rama main
## pull request a la rama main

name: Pruebas

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

## Maquinas a ejecutar

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:6.0
        ports:
          - 27071:27017

    env:
      MONGO_URI: ${{ secrets.MONGO_URI }}
      JWS_SECRET: ${{ secrets.JWT_SECRET }}
      PORT: ${{ secrets.PORT }}
      VITE_API_BASE: ${{ secrets.VITE_API_BASE }}

    steps:
      - name: Checkout repor actual que incluye workflow
        uses: actions/checkout@4

      - name: Clonar repo Athena Redux Bank
        run: |
          git clone https://github.com/kuaker/redux-athena-bank.git app

      - name: Crear un archivo .env para el backend
        run: |
          echo "MONGO_URI=${{ secrets.MONGO_URI }}" > app/backend/.env
          echo "JWS_SECRET=${{ secrets.JWT_SECRET }}" > app/backend/.env
          echo "PORT=${{ secrets.PORT }}" > app/backend/.env

      - name: Instalar dependencias para backend
        run: cd app/backend && npm install

      - name: Levantar el backend
        run: |
          cd app/backend
          npm run dev > backend.log 2>&1 &

      - name: Instalar wait-on
        run: npm install -g wait-on

      - name: Esperar a que el backend esté listo
        run: wait-on tcp:6007

      - name: Instalar dependencias del front-end
        run: cd app/frontend && npm install

      - name: Levantar el frontend
        run: |
          cd app/frontend
          npm run dev > frontend.log 2>&1 &
        env:
          VITE_API_BASE: ${{secrets.VITE_API_BASE}}

      - name: Esperar a que el frontend esté listo
        run: wait-on http://localhost:3000

      - name: Instalar y ejecutar pruebas (con Chromium)
        run: |
          npm install
          npx playwright install
          npx playwright test --reporter=html

      - name: Guardar reportes como artefactos
        if: always()
        uses: actions/upload-artifact@4
        with:
          name: playwright-report
          path: ./playwright-report

      - name: Deployar reporte a githubpages
        if: always()
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Clonar rama de gh-pages en carpeta temporal
          cd $RUNNER_TEMP
          git clone --branch gh-pages https://github.com/kuaker/taller-playwright-atenea.git gh-pages
          git clone --branch gh-pages https:/x-access-token:${{ secrets.GH_PAGES_PAT }}@github.com/${{github.repository}} gh-pages


          cd gh-pages

          rm -rf ./*

          mkdir -p report-${GITHUB_RUN_NUMER}
          cp -r $GITHUB_WORKSPACE/playwright/report/* ./report-${GITHUB_RUN_NUMBER}

          # commiteamos y pusheamos los cambios
          git add .
          git commit -n -m "Reporte de playwright"
          git push origin gh-pages

      - name: Imprimir URL reporte en consola
        if: always()
        run: |
          echo " URL Reporte disponible en: https://${{github.repository.owner}}.github.io${{github.event.repository.name}}/report-${{github.run.number}}/"
